// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class GenConcert {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GenConcert(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GenConcert.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Int> _concert = _lookup<ffi.Int>('concert');

  int get concert => _concert.value;

  set concert(int value) => _concert.value = value;

  int ChaCha20Poly1305EncryptFile(
    ffi.Pointer<ffi.Char> source_file,
    ffi.Pointer<ffi.Char> target_file,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _ChaCha20Poly1305EncryptFile(
      source_file,
      target_file,
      password,
    );
  }

  late final _ChaCha20Poly1305EncryptFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ChaCha20Poly1305EncryptFile');
  late final _ChaCha20Poly1305EncryptFile =
      _ChaCha20Poly1305EncryptFilePtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int ChaCha20Poly1305DecryptFile(
    ffi.Pointer<ffi.Char> source_file,
    ffi.Pointer<ffi.Char> target_file,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _ChaCha20Poly1305DecryptFile(
      source_file,
      target_file,
      password,
    );
  }

  late final _ChaCha20Poly1305DecryptFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ChaCha20Poly1305DecryptFile');
  late final _ChaCha20Poly1305DecryptFile =
      _ChaCha20Poly1305DecryptFilePtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int ZipCompress(
    ffi.Pointer<ffi.Char> list_of_file,
    ffi.Pointer<ffi.Char> output_path,
    int compression_method,
    int compression_level,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _ZipCompress(
      list_of_file,
      output_path,
      compression_method,
      compression_level,
      password,
    );
  }

  late final _ZipCompressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('ZipCompress');
  late final _ZipCompress = _ZipCompressPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<ffi.Char>)>();

  int ZipCompressDirectory(
    ffi.Pointer<ffi.Char> dir_path,
    ffi.Pointer<ffi.Char> output_path,
    int compression_method,
    int compression_level,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _ZipCompressDirectory(
      dir_path,
      output_path,
      compression_method,
      compression_level,
      password,
    );
  }

  late final _ZipCompressDirectoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('ZipCompressDirectory');
  late final _ZipCompressDirectory = _ZipCompressDirectoryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<ffi.Char>)>();

  int ZipExtract(
    ffi.Pointer<ffi.Char> archive_file,
    ffi.Pointer<ffi.Char> output_dir,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _ZipExtract(
      archive_file,
      output_dir,
      password,
    );
  }

  late final _ZipExtractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ZipExtract');
  late final _ZipExtract = _ZipExtractPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();
}

const int CONCERT_CHACHA20_POLY1305_ENCRYPT_FAILED = -2;

const int CONCERT_CHACHA20_POLY1305_DECRYPT_FAILED = -3;

const int CONCERT_CHACHA20_POLY1305_CAN_NOT_OPEN_SOURCE_FILE = -4;

const int CONCERT_CHACHA20_POLY1305_CAN_NOT_OPEN_TARGET_FILE = -5;

const int CONCERT_CHACHA20_POLY1305_NOT_CONCERT_FILE = -6;

const int BitCompressionMethodCopy = 0;

const int BitCompressionMethodDeflate = 1;

const int BitCompressionMethodDeflate64 = 2;

const int BitCompressionMethodBZip2 = 3;

const int BitCompressionMethodLzma = 4;

const int BitCompressionMethodLzma2 = 5;

const int BitCompressionMethodPpmd = 6;

const int BitCompressionLevelNone = 0;

const int BitCompressionLevelFastest = 1;

const int BitCompressionLevelFast = 3;

const int BitCompressionLevelNormal = 5;

const int BitCompressionLevelMax = 7;

const int BitCompressionLevelUltra = 9;

const int CONCERT_ZIP_EMPTY_FILE_LIST = -1;

const int CONCERT_ZIP_EMPTY_OUTPUT_PATH = -2;

const int CONCERT_ZIP_INVALID_DIR_PATH = -3;

const int CONCERT_ZIP_INVALID_COMPRESSION_METHOD = -4;

const int CONCERT_ZIP_INVALID_COMPRESSION_LEVEL = -5;

const int CONCERT_ZIP_ARCHIVE_FILE_NOT_EXISTS = -6;
